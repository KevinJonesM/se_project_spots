/******/ (() => { // webpackBootstrap
/******/ 	"use strict";

;// ./src/scripts/validation.js
function enableValidation(config) {
  var forms = document.querySelectorAll(config.formSelector);
  forms.forEach(function (form) {
    setEventListeners(form, config);
  });
}
function setEventListeners(form, config) {
  var inputs = form.querySelectorAll(config.inputSelector);
  var submitButton = form.querySelector(config.submitButtonSelector);
  toggleButtonState(inputs, submitButton, config);
  inputs.forEach(function (input) {
    input.addEventListener("input", function () {
      validateInput(input, config);
      toggleButtonState(inputs, submitButton, config);
    });
  });
}
function validateInput(input, config) {
  var errorElement = input.closest("label").querySelector(config.errorSelector);
  if (!input.validity.valid) {
    showInputError(input, errorElement, config);
  } else {
    hideInputError(input, config);
  }
}
function showInputError(input, errorElement, config) {
  errorElement.textContent = input.validationMessage;
  errorElement.classList.add(config.errorClass);
}
function hideInputError(input, config) {
  var errorElement = input.closest("label").querySelector(config.errorSelector);
  errorElement.textContent = "";
  errorElement.classList.remove(config.errorClass);
}
function toggleButtonState(inputs, button, config) {
  var isValid = Array.from(inputs).every(function (input) {
    return input.validity.valid;
  });
  if (isValid) {
    button.classList.remove(config.inactiveButtonClass);
    button.disabled = false;
  } else {
    button.classList.add(config.inactiveButtonClass);
    button.disabled = true;
  }
}
function resetValidation(form, config) {
  var inputs = form.querySelectorAll(config.inputSelector);
  inputs.forEach(function (input) {
    return hideInputError(input, config);
  });
  toggleButtonState(inputs, form.querySelector(config.submitButtonSelector), config);
}
;// ./src/pages/index.js
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }


document.addEventListener("DOMContentLoaded", function () {
  var validationConfig = {
    formSelector: "form",
    inputSelector: ".modal__input",
    submitButtonSelector: ".modal__submit-btn",
    inactiveButtonClass: "modal__submit-btn_disabled",
    errorClass: "modal__error_visible",
    errorSelector: ".modal__error"
  };
  enableValidation(validationConfig);
  var initialCards = [{
    name: "Val Thorens",
    link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/spots/1-photo-by-moritz-feldmann-from-pexels.jpg"
  }, {
    name: "Restaurant terrace",
    link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/spots/2-photo-by-ceiline-from-pexels.jpg"
  }, {
    name: "An outdoor cafe",
    link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/spots/3-photo-by-tubanur-dogan-from-pexels.jpg"
  }, {
    name: "A very long bridge, over the forest and through the trees",
    link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/spots/4-photo-by-maurice-laschet-from-pexels.jpg"
  }, {
    name: "Tunnel with morning light",
    link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/spots/5-photo-by-van-anh-nguyen-from-pexels.jpg"
  }, {
    name: "Mountain house",
    link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/spots/6-photo-by-moritz-feldmann-from-pexels.jpg"
  }, {
    name: "Golden Gate bridge",
    link: "https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/spots/7-photo-by-griffin-wooldridge-from-pexels.jpg"
  }];
  var editProfileButton = document.querySelector(".profile__edit-btn");
  var addCardButton = document.querySelector(".profile__add-btn");
  var editModal = document.querySelector("#edit-profile-modal");
  var addCardModal = document.querySelector("#add-card-modal");
  var editForm = editModal === null || editModal === void 0 ? void 0 : editModal.querySelector("form");
  var addCardForm = addCardModal === null || addCardModal === void 0 ? void 0 : addCardModal.querySelector("form");
  var profileNameElement = document.querySelector(".profile__name");
  var profileDescriptionElement = document.querySelector(".profile__description");
  var editNameInput = document.querySelector("#profile-name-input");
  var editDescriptionInput = document.querySelector("#profile-description-input");
  var cardNameInput = document.querySelector("#add-card-caption-input");
  var cardLinkInput = document.querySelector("#add-card-link-input");
  var cardTemplate = document.querySelector("#card-template");
  var cardList = document.querySelector(".cards__list");
  var previewModal = document.querySelector("#preview-modal");
  var previewImage = previewModal === null || previewModal === void 0 ? void 0 : previewModal.querySelector(".modal__image");
  var previewCaption = previewModal === null || previewModal === void 0 ? void 0 : previewModal.querySelector(".modal__caption");
  function openModal(modal) {
    if (modal) {
      modal.classList.add("modal_opened");
      document.addEventListener("keydown", handleEscapeKey);
    }
  }
  function closeModal(modal) {
    if (modal) {
      modal.classList.remove("modal_opened");
      document.removeEventListener("keydown", handleEscapeKey);
    }
  }
  function handleEscapeKey(event) {
    if (event.key === "Escape") {
      var openedModal = document.querySelector(".modal_opened");
      if (openedModal) closeModal(openedModal);
    }
  }
  document.querySelectorAll(".modal__close-btn").forEach(function (button) {
    var modal = button.closest(".modal");
    if (modal) {
      button.addEventListener("click", function () {
        return closeModal(modal);
      });
    }
  });
  document.querySelectorAll(".modal").forEach(function (modal) {
    modal.addEventListener("mousedown", function (event) {
      if (event.target === modal) {
        closeModal(modal);
      }
    });
  });
  function getCardElement(data) {
    if (!data.name || !data.link) {
      return null;
    }
    var cardElement = cardTemplate.content.querySelector(".card").cloneNode(true);
    var cardImage = cardElement.querySelector(".card__image");
    var cardTitle = cardElement.querySelector(".card__title");
    var cardlikeBtn = cardElement.querySelector(".card__like-btn");
    var cardDeleteBtn = cardElement.querySelector(".card__delete-btn");
    cardImage.src = data.link;
    cardImage.alt = data.name;
    cardTitle.textContent = data.name;
    cardImage.addEventListener("click", function () {
      if (previewModal && previewImage && previewCaption) {
        previewImage.src = data.link;
        previewImage.alt = data.name;
        previewCaption.textContent = data.name;
        openModal(previewModal);
      }
    });
    cardlikeBtn.addEventListener("click", function () {
      cardlikeBtn.classList.toggle("card__like-button_liked");
    });
    cardDeleteBtn.addEventListener("click", function () {
      cardElement.remove();
    });
    return cardElement;
  }
  function loadInitialCards() {
    var existingImages = new Set(_toConsumableArray(cardList.querySelectorAll(".card__image")).map(function (img) {
      return img.src;
    }));
    initialCards.forEach(function (card) {
      if (!existingImages.has(card.link)) {
        var cardElement = getCardElement(card);
        if (cardElement) cardList.prepend(cardElement);
      }
    });
  }
  loadInitialCards();
  addCardForm.addEventListener("submit", function (evt) {
    evt.preventDefault();
    var name = cardNameInput.value.trim();
    var link = cardLinkInput.value.trim();
    if (!name || !link) {
      return;
    }
    var cardData = {
      name: name,
      link: link
    };
    var cardElement = getCardElement(cardData);
    if (cardElement) {
      cardList.prepend(cardElement);
    }
    addCardForm.reset();
    resetValidation(addCardForm, validationConfig);
    toggleButtonState(addCardForm.querySelectorAll(validationConfig.inputSelector), addCardForm.querySelector(validationConfig.submitButtonSelector), validationConfig);
    closeModal(addCardModal);
  });
  if (editProfileButton && editModal) {
    editProfileButton.addEventListener("click", function () {
      editNameInput.value = profileNameElement.textContent;
      editDescriptionInput.value = profileDescriptionElement.textContent;
      resetValidation(editForm, validationConfig);
      openModal(editModal);
    });
  }
  if (editForm) {
    editForm.addEventListener("submit", function (evt) {
      evt.preventDefault();
      profileNameElement.textContent = editNameInput.value.trim();
      profileDescriptionElement.textContent = editDescriptionInput.value.trim();
      closeModal(editModal);
    });
  }
  if (addCardButton && addCardModal) {
    addCardButton.addEventListener("click", function () {
      resetValidation(addCardForm, validationConfig);
      openModal(addCardModal);
    });
  }
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,